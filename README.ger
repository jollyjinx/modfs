Der Copyright-Teil und der Haftungsausschluß sind nur in
Englisch verfügbar. Eine Übersetzung der Lizenzbestimmungen
der GPLv2 und der Folgelizenzen findet sich im Internet.

-------------------------------------------------------------------

Copyright (C) 2014 P.Haemmerlein (http://www.yourfritz.de)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program, please look for the file COPYING.

-------------------------------------------------------------------

Die enthaltenen Binärdateien kann man sich mit dem sqfstools-3.4-
Paket des FREETZ-Projektes selbst erstellen. Nähere Informationen
zu FREETZ findet man unter http://freetz.org.

Die aktuelle Version dieses Programms kann man von der Adresse
http://yourfritz.de/modfs.tgz laden.

Es wird nach derzeitiger Planung keine Versionsgeschichte für das
Paket geführt. Wird ein Fehler gefunden, soll er auch zeitnah 
behoben werden und es wird dann ein neues Download-Archiv aus
den korrigierten Dateien erstellt.

Sollten künftige Änderungen die Kompatibilität mit dieser Version
(z.B. beim 'Modscript'-Format) brechen, wird für die neue Version
dann auch ein anderer Dateiname für das Paket verwendet.

===================================================================
---- please cut here ---- please cut here ---- please cut here ----
------- bitte hier trennen ------------- bitte hier trennen -------
===================================================================

Die Version in (schlechter) englischer Sprache sollte sich in der
Datei 'README' in demselben Verzeichnis befinden, wie diese Datei.
Ist sie nicht vorhanden, wurde das Archiv unerlaubt modifiziert.
Gemäß den Lizenzbestimmungen sind bei der Weitergabe und/oder einer
Änderung des Pakets die Dateien 'README' und 'COPYING' in Englisch
unaufgefordert dem resultierenden Archiv hinzuzufügen. Dabei dürfen
die Copyright- und Lizenzhinweise ergänzt, aber nicht entfernt 
werden.

WOZU DIENT DIESES PAKET ?
=========================
Mit diesem Paket kann das Dateisystems einer FRITZ!Box (das ist ein
Internet-Router der Firma AVM aus Berlin) direkt auf dem Gerät so
modifiziert werden, daß in das - normalerweise ausschließlich im 
'Nur Lesen'-Modus verfügbare - Dateisystem der Firmware eigene
Erweiterungen eingebracht oder vorhandene Dateien des Herstellers
für das eigene Gerät geändert werden und diese Änderungen dann beim
nächsten Start des Gerätes im neuen Dateisystem permanent verankert
sind. Da diese Änderungen direkt auf der FRITZ!Box ausgeführt
werden, ist eine zusätzliche Linux-Installation zur Erzeugung eines
eigenen Firmware-Images nicht zwingend erforderlich (doch ab einer
gewissen "Tiefe" des Eingriffs - z.B. beim Einbau neuer binärer
Dateien - durchaus zu empfehlen, bis eine andere Lösung verfügbar
ist).

In erster Linie soll damit bisherigen Nutzern dieser Geräte, die
sich die Geräte unter anderem auch unter dem Aspekt der Erweiter-
barkeit der Firmware durch zusätzliche Shell-Skripte oder eigene 
Programme angeschafft haben, diese Möglichkeit auch mit aktueller 
Firmware wieder eröffnet werden. Der Hersteller hat sich nach einem 
größeren Sicherheitsproblem am Beginn des Jahres 2014 für künftige 
Versionen offenbar zur Abschaffung einiger Funktionen entschlossen, 
die bisher für eigene Erweiterungen genutzt werden konnten. Auch 
wenn diese Erweiterbarkeit keine zugesicherte Eigenschaft der 
Geräte der Marke 'FRITZ!Box' war, wurde sie doch gerade in der
deutschen Presse immer wieder mit Beiträgen in Computer-Zeit-
schriften und sogar in den Wochenend-Beilagen großer überregionaler
Tageszeitungen herausgestellt und so war diese Erweiterbarkeit 
sicherlich für einige Käufer auch ein wichtiger Punkt bei ihrer
Entscheidung für ein solches Gerät.

Auch wenn ich persönlich alle Schritte zu einer besseren Ab-
sicherung der Firmware der Geräte sehr begrüßenswert finde, ist 
diese Änderung der Firmware in meinen Augen nur sehr inkonsequent
umgesetzt und hat eher plakative Wirkung. Auch andere Änderungen
der Firmware (Stichwort allcfgconv und die c-Option) haben nur 
einen Placebo-Effekt und werden einen ernsthaften Angreifer nicht 
vor echte Probleme stellen können. Der Anteil der Kunden, die nur
5% der Funktionen ihres Gerätes benutzen, wird damit aber sicher-
lich zu beruhigen sein. Die kleine Schar derer, die sich für zu-
sätzliche Anwendungen oder einen *wirklich sicheren* Router
interessieren (z.B. einen SSH-Zugang anstelle des Telnet-Zugangs, 
der unter Sicherheitsaspekten nun mal ein Alptraum ist, verwenden
wollen), bleibt dabei außen vor ... dabei sind gerade diese Nutzer
unter Umständen die Multiplikatoren, die anderen die Anschaffung
eines AVM-Gerätes nahelegen würden, wenn die Auswahl zwischen
mehreren Geräten möglich ist und die meisten potentiellen Käufer
eher auf der Basis des Preises ihre Entscheidung treffen würden.

Da es seitens des Herstellers wohl auch in absehbarer Zukunft keine
weitergehende Unterstützung für "Bastler" (in Form einer speziellen
Firmware und/oder einer definierten Schnittstelle für eigene Er-
weiterungen) geben wird, ist in meinen Augen hier Hilfe zur Selbst-
hilfe angezeigt.

Für zusätzliche Binaries würde ich immer wieder das Projekt
"FREETZ" empfehlen, allerdings mag eben nicht jeder die recht
umfangreichen Eingriffe des dort verwendeten Frameworks auch in
vollem Umfang in der eigenen Box. Als Grundlage für das Kompilieren
eigener Erweiterungen ist es aber unverzichtbar und ich würde - bis
zum Vorliegen einer besseren Lösung in Form eines passenden Archivs
(Repository) für die unterstützten Modelle - jedem die Verwendung
einer eigenen Freetz-Installation ans Herz legen wollen.

QUICKSTART
==========
Einfach in einer Telnet-Sitzung auf dem Gerät das Archiv von 
yourfritz.de/modfs.tgz laden, die Integrität prüfen (wer über aus-
reichende Shell-Kenntnisse verfügt, sollte auch eine inhaltliche
Prüfung vornehmen) und dann das "Arbeitspferd" mit

# ./modfs

aufrufen. Nach einigen Prüfungen der notwendigen Voraussetzungen
und einem kleinen Frage- und Antwort-Spiel zu den vorzunehmenden
Änderungen wird das neue Dateisystem erstellt und nach einem
Neustart des Gerätes wird dann das neue Dateisystem verwendet
werden.
Auf einer "leeren" 7490 dauert der ganze Vorgang nur ca. 5 Minuten.

UNTERSTÜTZTE MODELLE
====================
7490   - mehrfach getestet (>10 Boxen inzwischen modifiziert)
7362SL - bisher (23.09.2014) nur bei einem einzelnen Gerät
         getestet; der gesamte Vorgang ist auch etwas langwieriger
         als bei einer 7490, da deutlich weniger freier Speicher-
         platz im Gerät verfügbar ist und große Teile der Dateien
         auf (eher langsamen) USB-Speicher ausgelagert werden
         müssen ... aber wenn >256MB an freiem Speicherplatz auf
         einem angeschlossenen USB-Datenträger verfügbar sind und 
         man etwas Zeit mitbringt, kommt man auch auf einer 7362SL
         zum Ziel

Nach neueren Erkenntnissen hat es allerdings den Anschein, als
müsse man vorher die Firmware der FRITZ!Box wenigstens auf eine
Version >= 06.10 (die es m.W. nur als 'Labor-Version' gibt, die
daraus erstellten Release-Versionen heißen wohl alle 06.20) aktua-
lisieren, damit der Mechanismus zur Umschaltung zwischen den zwei
möglichen Systemen in der Box aktiviert wird.
Die generelle Möglichkeit der Umschaltung mit der Variablen im
Environment des Loaders ist wohl ab Werk schon vorhanden (ich habe
jedenfalls keine Aktualisierung des Urladers bisher gesehen bei 
einer 7490), sie wird aber wohl vor der 06.10 nicht verwendet und
beim Fehlen der Variablen bootet das Gerät nach meinen Tests immer
aus MTD0/MTD1. Das ist aber noch nicht bis zum Ende geklärt, dafür
ist diese Vorgehensweise wohl noch zu neu, sie wurde - reine Ver-
mutung - erst mit der 'Auto-Update'-Funktion zusammen verwirklicht,
nachdem die prinzipielle Vorgehensweise erstmals bei den DOCSIS-
Modellen zum Einsatz kam.

Wenn man das Skript um die Unterstützung weiterer Modelle selbst
erweitern will (die 3490 dürfte ein aussichtsreicher Kandidat
sein, der wahrscheinlich durch bloßes Hinzufügen der Hardware-
Version zur Liste der unterstützten Modelle funktionieren müßte),
muß man an drei Stellen ändern:

1. Die Liste der Hardware-Kennungen (hwrevs_supported) um die
   entsprechende Nummer ergänzen.
2. Für das betreffende Modell den korrekten Pfad zum Download der
   Hersteller-Firmware eintragen (ftp_path_${hwrev}).
3. Im Unterverzeichnis 'bin' ein passendes Unterverzeichnis (es
   ist wieder die 'HWRevision' des entsprechenden Modells) erzeu-
   gen und dort die notwendigen Binaries (unsquashfs/mksquashfs)
   entweder als "echte" Dateien ablegen, wenn nicht die VR9-
   Binaries verwendet werden sollen oder einfach einen passenden
   Symlink auf die VR9-Dateien hinterlegen.

Die Unterstützung anderer Modelle (speziell der 6360, die zwar
'Hot Flash' unterstützt, das aber mit NOR-Flash - und damit mit
einem anderen Ablauf des 'Flashens' - realisiert) wird wahr-
scheinlich im Laufe der Zeit noch nachgerüstet werden.

Wenn jemand weitere Modelle erfolgreich testen konnte, würde ich
mich über eine entsprechende Nachricht freuen, ich würde dann
diese Modelle in die Liste mit aufnehmen.

WIE FUNKTIONIERT DAS GANZE ?
============================
Zuerst überprüft das Skript das Gerät. Dabei soll sichergestellt
werden, daß einige grundlegende Voraussetzungen erfüllt sind. Im
einzelnen sind das folgende:

- Die Hardware-Version des Gerätes findet sich in der Liste der
  unterstützten Geräte (hwrevs_supported).
- Die Variable, mit der der Urlader (EVA) entscheidet, welche der
  beiden Systemversionen im Flash-Speicher der Box geladen werden
  soll, muß existieren und den Wert 0 oder 1 haben.

Die o.a. Bedingungen werden auch dann geprüft, wenn man nur die
Umschaltung auf das alternative System beim nächsten Start der
Box rückgängig machen will, solange man das Gerät nach den zuvor
ausgeführten Modifikationen noch nicht neu gestartet hat.
Wenn es sich nicht um einen 'undo'-Aufruf handelt (dazu später
mehr), werden die folgenden Bedingungen auch noch getestet:

- Die o.a. Variable hat im Moment den Wert, der das gerade aus-
  geführte System auch beim nächsten Start auswählen würde.
- Es gibt eine MTD-Partition (das ist ein Bereich des Flash-
  Speichers der Box) mit dem Namen 'kernel' und eine mit dem 
  dazugehörigen Dateisystem mit dem Namen 'filesystem'.
- Es gibt jeweils eine zusätzliche Partition für den Kernel und
  das Dateisystem, bei denen der Namen mit 'reserved-' beginnt.
- Wenn eine dieser Partitionen nicht vorhanden sein sollte, könnte
  allerdings auch schon ein früherer Test (als es darum ging, ob
  das laufende System auch das beim nächsten Start zu ladende ist)
  fehlgeschlagen sein.
- Der Inhalt der beiden gefundenen Kernel-Partitionen wird ver-
  glichen (anhand des MD5-Hash-Wertes) und wenn der Kernel in der
  inaktiven Partition nicht dem des laufenden Systems entspricht,
  hat man jetzt die Möglichkeit, den Inhalt der beiden Partitionen
  des laufenden Systems in die inaktiven Partitionen zu kopieren.
  Wenn man diesen Kopiervorgang ausführen läßt, wird anschließend
  das Gerät neu gestartet und man muß mit der Prozedur von vorn
  beginnen.
- Jetzt wird der verfügbare Platz im Hauptspeicher des Gerätes 
  überprüft, speziell der im 'tmpfs' verfügbare Platz zur tem-
  porären Speicherung von Dateien.
- Als letzte Voraussetzung muß dann noch genug freier Speicher auf
  einem angeschlossenen Datenträger vorhanden sein (im 'tmpfs', im
  internen Flash-Speicher mit dem yaffs2-Dateisystem (nur bei 
  einigen Modellen vorhanden) oder auf einen angeschlossenen USB-
  Datenträger). Dieser Platz wird zum Entpacken, Modifizieren und
  anschließendem Packen des neuen Dateisystems benötigt. Wenn das
  Dateisystem des ausgewählten Laufwerks keine Linux-Dateirechte
  unterstützt (wie z.B. bei den meisten Windows-kompatiblen 
  Formaten), wird eine Containerdatei anstelle eines normalen
  temporären Verzeichnisses benutzt und diese Containerdatei dann
  per 'Loopback-Device' als ext3-formatiertes Laufwerk eingebunden.
  
Wenn alle der vorgenannten Bedingungen erfüllt sind, wird für den
nächsten Schritt eine 'Vorlage' für das Dateisystem benötigt. Diese
kann auf drei Wegen zur Verfügung gestellt werden:

1. Es wird das root-Dateisystem des laufenden Systems verwendet.
2. Das root-Dateisystem wird aus einer direkt vom FTP-Server des
   Herstellers geladenen Kopie der Firmware extrahiert.
3. Es wird eine bereits früher geladene Kopie des root-Dateisystems
   auf einem angeschlossenen Datenträger verwendet. Das kann ent-
   weder eine Kopie eines kompletten Firmware-Images (das ist nor-
   malerweise ein tar-Archiv mit dem Dateityp 'image') oder ein
   bereits extrahiertes squashfs-Image sein, aber kein 'wrapper'-
   Image als Ganzes (das ist die komplette 'filesystem.image'-
   Datei in einem Firmware-Image).

Wenn man das root-Dateisystem des laufenden Systems als Vorlage
verwendet, werden natürlich dort bereits vorhandene Änderungen
automatisch auch in das neue Dateisystem übernommen. Die einzelnen
Skript zur Ausführung der Modifikationen (das wird weiter unten
noch erläutert) sind selbst dafür verantwortlich, daß sie keine
Änderungen mehrfach ausführen und dadurch die Funktionsfähigkeit
des neuen Dateisystems beeinträchtigen.
Die von mir bereitgestellten Skripte prüfen alle vor einer Modi-
fikation, ob diese bereits vorhanden ist.

Wenn man sich für den Download einer 'frischen' Firmware vom 
FTP-Server des Herstellers entschieden hat, gibt einem das Skript
nach dem Extrahieren des squashfs-Images für das root-Dateisystem
die Möglichkeit, dieses Image für eine spätere erneute Verwendung
auf einem permanenten Speicher abzulegen, wenn an der Box ein
passender Datenträger angemeldet ist.

Bei der Verwendung einer solchen Kopie in einem erneuten Durch-
lauf (Punkt 3 der o.a. Liste), sucht das Skript nur im Wurzel-
verzeichnis eines angemeldeten Datenträgers (also nur in dieser
einen Verzeichnisebene) automatisch nach einer passenden Datei.
Dabei wird (bei einer passenden Box mit verfügbarem NAND-Flash-
Speicher) auch der interne Flash als 'Laufwerk' angesehen, je-
doch wird wohl nur bei der 7490 (und der noch nicht unterstützten
7390) der Platz in diesem Flash-Speicher ausreichend sein für die
Speicherung eines Firmware- oder SquashFS-Images.
Für die automatische Suche muß ein Firmware-Image unter dem Datei-
namen 'firmware.image' und ein SquashFS-Image unter dem vollen
Namen 'filesystem_core.squashfs' abgelegt sein.

Ansonsten bleibt nur noch die Eingabe des kompletten Dateinamens
für diese Vorlage. Da die originale Firmware bei dieser Eingabe
keinerlei Unterstützung für die Korrektur fehlerhafter Eingaben
bietet (je nach Terminaltyp funktioniert nicht einmal das Löschen
des letzten eingegebenen Zeichens, von den Cursor-Tasten ganz zu
schweigen), ist dabei höchste Aufmerksamkeit erforderlich.

Ich hatte absolut kein Interesse eine Art 'readline'-Unterstützung
nachzubauen, der Aufwand lohnt sich einfach nicht.

Wenn man sich bei der Eingabe einmal vertippt, bleibt einem 
nichts anderes, als diesen Versuch mit der 'Return'-Taste abzu-
schließen. Das Skript wird sich dann über die nicht gefundene 
Datei empören und man kann einen neuen Versuch einer korrekten
Eingabe starten.

Nun sucht das Skript nach einem Platz mit ausreichend freiem 
Speicher, um die Zwischenergebnisse des ganzen Prozesses sicher
ablegen zu können. Wenn es mehrere Kandidaten für eine derartige
Ablage gibt, muß man aus der angezeigten Liste einen passenden
Ablageort auswählen. Dabei sollte Datenträgern der Vorzug gegeben
werden, die 'von Haus aus' mit Linux-Dateirechten umgehen können.
Das Skript berücksichtigt bei dieser Entscheidung nur die Linux-
Dateisysteme, die bereits in der originalen Firmware unterstützt
werden (tmpfs, yaffs2, ext2/ext3/ext4). Befindet sich auf dem
ausgewählten Datenträger kein Dateisystem mit 'nativer' Unter-
stützung von Linux-Rechten, wird stattdessen aus einer gepackten
Vorlage für einen ext3-formatierten Container (die Datei befindet
sich im 'files'-Unterverzeichnis und heißt '128MB-ext3.gz') eine
passende Containerdatei auf dem Datenträger erzeugt, diese per
Loopback-Device als neues Laufwerk angemeldet und in der Folge
dann für die weiteren Datei-Operationen verwendet. Nach dem Ende
des gesamten Vorgangs wird dieser Container dann wieder abgemeldet
und gelöscht, das Skript bietet zwischendrin keine Möglichkeit an,
diesen Container zu sichern. Meiner Meinung nach ist das Speichern
dieser temporären Resultate nicht sinnvoll und so bin ich eher
bereit, bei jedem Aufruf des Skripts (das findet ja nun auch nicht
mehrmals am Tag regelmäßig statt) die Zeit für das Entpacken des
Containers zu investieren. Wenn das jemandem zuviel Zeit in An-
spruch nimmt, kann er ja selbst das Container-Volume bereits vor
dem Aufruf des Skriptes einrichten und dann einfach seinen Con-
tainer als 'Arbeitsverzeichnis' auswählen.

Im nächsten Schritt wird jetzt das SquashFS-Image des root-Datei-
systems entpackt und die in diesem Image verwendete Blockgröße
sowie die verwendete Reihenfolge der Datenspeicherung (little
endian vs. big endian) für das spätere erneute Packen abgefragt.

Jetzt ist der Punkt erreicht, an dem die einzelnen Skripte zur
Ausführung der verschiedenen Modifikationen ins Spiel kommen.
Dabei wird jede Datei im Unterverzeichnis 'modscripts' in eine
alphabetisch nach dem Dateinamen sortierte Liste aufgenommen, die
dann Zeile für Zeile nach potentiellen 'modscripts' durchsucht
wird. Unter einem 'modscript' verstehen wir ab jetzt eine Shell-
Datei, die einen bestimmten Aufbau hat und somit vom 'modfs'-
Skript zur Ausführung von Änderungen am neuen Dateisystem aufge-
rufen werden kann. Ein ModScript wird nur dann als gültig ange-
sehen, wenn die 'ausführbar'-Flags für die Besitzer der Datei 
(Benutzer und Gruppe) beide gesetzt sind.
Die vorher erstellte Liste der ModScripts wird der Reihe nach
eingelesen und dabei wird jedes gefundende Skript dahingehend
geprüft, ob es das Flag 'world executable' (o+x) auch gesetzt
hat. Ist das der Fall, wird das betreffende Skript in diesem 
ersten Durchgang ohne weitere Nachfragen aufgerufen und erhält
damit die Möglichkeit, seine Modifikationen vorzunehmen.
Nach diesem ersten Durchlauf durch die Liste werden die bereits
aufgerufenen ModScripts aus der Liste entfernt und im nun fol-
genden zweiten Durchlauf wird für jedes potentiell auszuführende
ModScript die enthaltene Beschreibung angezeigt und eine Ent-
scheidung, ob dieses Skript angewendet werden soll, eingefordert.

Nachdem dann auch im zweiten Durchgang die verbliebenen Skripte
alle abgearbeitet oder abgelehnt wurden, wird noch einmal der Pfad
zum 'Wurzelverzeichnis' des neuen Dateisystems angezeigt und man
hat nun die Gelegenheit, dort die Dateien noch einmal manuell zu
prüfen, bevor der - durchaus hohe zeitliche Aufwand - des Packens
am Ende umsonst investiert wird.
Das Skript wartet an dieser Stelle ganz simpel auf das Drücken
der Eingabetaste für den Beginn des Packprozesses, es akzeptiert
aber auch die Eingabe eines einzelnen 'q' als Anweisung für den
Abbruch der weiteren Verarbeitung.

Nach dem Drücken der Eingabetaste beginnt dann das Packen des
neuen Dateisystems. Dieser Vorgang nimmt - abhängig von den kon-
kreten Gegebenheiten der Box - einiges an Zeit in Anspruch. Auf
einer FRITZ!Box 7490 mit ausreichend freiem Speicher im tmpfs
dauert das Packen des Dateisystems einer Version 06.20 mit nur
wenigen Modifikationen ziemlich genau 3 Minuten. Das dürfte aber
eher die untere Grenze des Machbaren sein, da I/O-Operationen im
tmpfs praktisch verzögerungsfrei erfolgen und bei der Verwendung
von NAND-Flash oder gar USB-Geräten für die Ablage der Dateien
wesentlich mehr Zeit alleine für die physikalischen Ein-/Ausgabe-
operationen erforderlich sein wird. Solange sich die Anzeige noch
rührt (der 'Spinner' steht auch mal für 15 Sekunden still, wenn
gerade ein größeres File komprimiert wird), sollte man die Geduld
nicht verlieren.

Nach dem Packen des neuen Dateisystems wird dieses dann in die
Dateisystem-Partition des inaktiven Systems kopiert und für den
nächsten Start des Gerätes auf das alternative System umgeschaltet.

Jetzt wird noch etwas aufgeräumt (Container entsorgen, wenn er
verwendet wurde, ansonsten die Dateileichen verschwinden lassen)
und damit ist die Arbeit des Skriptes dann auch schon beendet.
Normalerweise dauert es länger bis hierher zu lesen, als das 
Skript für die Ausführung benötigt.

Den fälligen Neustart muß man schon selbst ausführen. Sollte man
sich vor dem Neustart entschließen, die Umschaltung auf das neue
System rückgängig machen zu wollen, reicht ein erneuter Aufruf
des Skriptes mit dem Parameter 'undo'. Nach der Prüfung der Vor-
aussetzungen (diesmal eben der bereits erfolgten Umschaltung auf
das alternative System) wird dann ganz simpel die Variable im
Urlader wieder auf das aktuell laufende System gesetzt. Die 
in der Dateisystem-Partition vorgenommenen Änderungen werden 
nicht gesondert rückgängig gemacht, sie werden bei einem erneuten
Aufruf von 'modfs' oder auch bei einem regulären Firmware-Update
ohnehin überschrieben.

MITGELIEFERTE MODIFIKATIONEN
============================
Ich habe nur vier - in meinen Augen nützliche - Modifikationen mit
in das Paket gepackt.

Das erste Skript aktiviert die Abarbeitung der Kommandos in der
Datei 'rc.user' (das ist ziemlich genau dasselbe, wie die Datei
'debug.cfg' in der Version von AVM) am Ende des Startprozesses, 
wenn in dieser Datei irgendwelche Kommandos enthalten sind.
Das ist auch das einzige der mitgelieferten ModScripts, das ohne
Nachfrage abgearbeitet wird.
Wenn im Rahmen der 'Nachkontrolle' der vorgenommenen Änderungen
durch das Skript festgestellt wird, daß der TFFS-Node mit der
Minor-ID 98 (das ist die 'Datei' rc.user/debug.cfg) keinen Inhalt
hat, wird ein einzelnes 'eventadd'-Kommando dort eingetragen, mit
dem man den Start der Abarbeitung der Kommandos anhand des Eintrags
im Eventlog der Box kontrollieren kann. Da - wenn keine weiteren
Änderungen vorgenommen werden - der einzige 'sichtbare' Effekt die
wieder aufgenommene Abarbeitung der Kommandos in der Liste ist,
führt eine leere Kommandoliste offenbar bei einigen Benutzern zu
Verwirrung, da es ansonsten keine weiteren Auswirkungen der Modi-
fikation nach einem Neustart gibt.

Alle weiteren Modifikationen werden nur nach Nachfrage vorgenommen.

Das zweite Skript ergänzt die Datei /etc/profile um eine letzte
Zeile, in der die Existenz einer Datei '/var/custom/profile' ge-
prüft wird und - wenn diese vorhanden ist - die dort enthaltenen
Kommandos mit 'source' (das ist das .-Kommando) in die Abarbeitung
bei jedem Shell-Login einbezogen werden. Das kann als Ersatz für
die normalerweise nicht vorhandene 'benutzerspezifische' Profile-
Datei '~/.profile' verwendet werden, um eine eigene Umgebung für
die Login-Shell aufzubauen (z.B. Aliase setzen, Suchpfade erwei-
tern oder auch Terminaleinstellungen anpassen).

Als drittes gibt es noch ein Skript, das ein neues 'Kommando' für
das Editieren der rc.user-Datei erzeugt, bei dem man sich nicht
um die Besonderheiten der Speicherung dieser Datei im TFFS (nur
zeichenorientierter Zugriff funktioniert dort) kümmern muß. Die
Handhabung ist selbsterklärend, normalerweise wird einfach nur
'edit_rcuser' aufgerufen und dann muß man nur noch die Bedienung
des 'vi' beherrschen (das ist beim Aufruf von 'nvi' ja auch nicht
anders). Nunmehr gibt es das 'edit_rcuser'-Skript auch in einer
Version, die sich bei den auszugebenden Texten an der Sprache der
verwendeten Firmware orientiert (nur 'de' unterstützt, alles 
andere wird wie 'en' behandelt).

Das letzte Skript erzeugt in einer Kombination aus einem zusätz-
lichen Shell-Skript und der Änderung einer Lua-Datei für das GUI
des Herstellers in der 'Neustart'-Seite des AVM-GUI zwei zusätz-
liche Radio-Buttons, mit denen man das zu startende System direkt
vor dem Neustart noch ändern kann. Dabei wird auch dann, wenn die
Firmware-Version für beide Systeme identisch sein sollte (was nach
dem Einsatz von 'modfs' die einzig logische Option ist, wenn man 
nicht anschließend noch zusätzliche Änderungen vorgenommen hat),
anhand des Änderungsdatums für das root-Dateisystem-Image eine 
Unterscheidung innerhalb derselben Firmware-Version möglich ge-
macht.
Da diese Modifikation auch eine Lua-Datei von AVM betrifft und 
diese in einem Gerät mit mehreren möglichen 'Brandings' auch
mehrfach vorhanden ist/sein kann, wird vom Skript nur die Datei
modifiziert, die zum aktuell eingestellten Branding gehört.

WARUM HABE ICH KEIN ETABLIERTES PAKETVERWALTUNGSFORMAT VERWENDET ?
==================================================================
Das Skript ist ja dafür gedacht, seine ersten Schritte direkt auf
einer FRITZ!Box mit originaler Firmware und nur einem Telnet-Zugang
zur Shell zu machen. Da es dort keinerlei Unterstützung für RPM-
Dateien oder ein ähnliches Format gibt, blieb eigentlich nur die
Möglichkeit, das Ganze ausschließlich in Form von Shell-Code zu
realisieren. Schon die 'Zugabe' von Binärdateien in Form der
squashfs-Tools ist eigentlich nicht im Sinne des Erfinders, aber
ich habe einfach keine andere halbwegs performante Lösung dafür
gefunden. Die zaghaften Versuche, das Entpacken und Packen eines
SquashFS-Images mittels Shell-Code zu realisieren, habe ich sehr
schnell wieder aufgegeben. Das Packen eines 'echten' Images auf
diesem Weg hätte wahrscheinlich knapp zwei Tage gedauert (und das
auf einer 7490).
Ich habe auch bei einer Suche keine anderen 'fertigen' Lösungen für
ein ähnliches Problem gefunden, die die notwendigen Einschränkungen
(nur die Verwendung von Kommandos, die 'out of the box' bereits
in der AVM-Firmware vorhanden sind) erfüllt hätten.
So habe ich also ein eigenes einfaches Format gewählt, das sicher-
lich seine Ecken und Kanten hat.
Es kam mir auch mehr auf eine einfache Umsetzung und Lokalisier-
barkeit an, als auf eine besonders ausgefeilte Lösung an dieser
Stelle.

WIE KANN MAN EIGENE MODIFIKATION EINBINDEN ?
============================================
Wer sich an diesen Teil wagen will, der verfügt in der Regel auch 
über ausreichende Englisch-Kenntnisse, um mein Kauderwelsch in der
englischen Version dieser Datei zu entziffern. Daher verweise ich
für das Format eines ModScripts und den Ablauf der drei möglichen
Schritte einer solchen Modifikation auf die 'README'-Datei und die
bereitgestellten Beispiele im 'modscripts'-Verzeichnis.

Ansonsten kann man natürlich jederzeit in der 'Pause' vor dem 
Packen des neuen Dateisystems in einer zweiten Shell-Instanz seine
eigenen Änderungen von Hand an der Dateistruktur vornehmen.
