# MODFS_MODSCRIPT
# SUPPORTS precheck postcheck install language(en,de)
# NAME enable system selection from GUI
# DESCRIPTION en
# add the option to switch between available systems to the GUI's 
# 'restart' page/frame
# DESCRIPTION de
# Hinzufügen der Auswahl des beim nächsten Start zu ladenden Systems zur 
# 'Neustart'-Maske des AVM-Webinterfaces
# EOH
#
# process parameters
#
language=$1
rootdir=$2
mode=$3
step=$4
[ ${#4} -eq 0 ] && exit 59 # invalid call
#
# execute the requested step
#
rc=0
branding="$(sed -n -e 's/^firmware_version\t\(.*\)/\1/p' /proc/sys/urlader/environment)"
luafile="$rootdir/usr/www/$branding/system/reboot.lua"
binfile="/usr/bin/guibootmanager"
cmdfile="$rootdir$binfile"
find_line()
{
	local line rc=0
	line="$(grep linux_fs_start $luafile)"
	[ ${#line} -gt 0 ] && rc=0 || rc=1
	return $rc
}
find_envvar()
{
	local line rc=0
	line="$(grep linux_fs_start /proc/sys/urlader/environment)"
	[ ${#line} -gt 0 ] && rc=0 || rc=1
	return $rc
}
install_script()
{
	cat >"$cmdfile" <<"ENDOFSCRIPT"
#! /bin/sh
##############################################################################
#                                                                            #
# GUI Boot Manager extension for AVM's FRITZ!Box routers with "hot flash"    #
# capabilities                                                               #
#                                                                            #
# Copyright (C) 2014 P.Haemmerlein (http://www.yourfritz.de)                 #
#                                                                            #
# This program is free software; you can redistribute it and/or              #
# modify it under the terms of the GNU General Public License                # 
# as published by the Free Software Foundation; either version 2             #
# of the License, or (at your option) any later version.                     #
#                                                                            #
# This program is distributed in the hope that it will be useful,            #
# but WITHOUT ANY WARRANTY; without even the implied warranty of             #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
# GNU General Public License under                                           #
# http://www.gnu.org/licenses/gpl-2.0.html                                   #
# for more details.                                                          #
#                                                                            #
# "FRITZ!Box" is a registered word mark and "AVM" is a registered            #
# word and figurative mark of:                                               #
# AVM Computersysteme Vertriebs GmbH, 10559, Berlin, DE.                     #
#                                                                            #
##############################################################################
#
# pooled variables here for easy changes
#
envpathname="/proc/sys/urlader/environment"
hwrevname="HWRevision"
hwrevs_supported="175 185 203"
procmtd="/proc/mtd"
mtdprefix="mtd"
mtdblockprefix="mtdblock"
kernelname="kernel"
filesystemname="filesystem"
reservedprefix="reserved-"
fsvarname="linux_fs_start"
tffsname="tffs"
wrapper="/wrapper"
rootfsimage="filesystem_core.squashfs"
versionfilename="etc/version"
tmpdirbase="/var/tmp"
shl="/bin/sh"
#
# universal functions
#
# check, if a list contains an item and return its index (based on 1)
# $1 - the item to look for (needle)
# $2 - the haystack
#
index_of_item()
{
	local item i=0
	for item in $2; do
		let i+=1
		[ x"$1" == x"$item" ] && echo $i && return 0
	done
	return 1
}
#
# get next system index from environment
#
get_system_switch() { sed -n -e "s/^$fsvarname\t\([01]\)/\1/p" $envpathname; }
#
# get hardware revision from environment (it has not to be a number !)
#
get_hardware_revision() { sed -n -e "s/^$hwrevname\t\(.*\)/\1/p" $envpathname; }
#
# check, if the specified hardware revision is supported
# $1 - hardware revision
#
check_hardware_revision() { return $(index_of_item "$1" "$hwrevs_supported"); }
#
# get MTD number by name
# $1 - requested MTD partition name
#
get_mtd_by_name() { sed -n -e "s|$mtdprefix\([0-9]\{1,2\}\): [0-9a-f]\{8\} [0-9a-f]\{8\} \"$1\"|\1|p" $procmtd; }
#
# get MTD name by number
# $1 - requested MTD partition number
#
get_mtd_by_number() { sed -n -e "s|$mtdprefix$1: [0-9a-f]\{8\} [0-9a-f]\{8\} \"\(.*\)\"|\1|p" $procmtd; }
#
# build MTD partition groups
#
build_partitions()
{
	local g1 g2
	g1=$(get_mtd_by_name $kernelname):$(get_mtd_by_name $filesystemname)
	g2=$(get_mtd_by_name $reservedprefix$kernelname):$(get_mtd_by_name $reservedprefix$filesystemname)
	if [ ${g1:0:1} -lt ${g2:0:1} ]; then
		echo "$g1 $g2"
	else
		echo "$g2 $g1"
	fi
}
#
# check next system against running
#
is_switched()
{
	local nxt kernel filesys kname fname switched=1
	nxt=$(get_system_switch)
	set -- $(build_partitions)
	[ $nxt -gt 0 ] && shift
	kernel=${1%:*}
	filesys=${1#*:}
	kname="$(get_mtd_by_number $kernel)"
	fname="$(get_mtd_by_number $filesys)"
	[ "${kname:0:${#reservedprefix}}" == "$reservedprefix" ] && switched=0
	return $switched
}
#
# get system version
# $1 - system root
#
get_system_version() { $shl "$1$versionfilename" --version; }
#
# get system date
# $1 - system root
#
get_system_date() { $shl "$1$versionfilename" --date; }
#
# switch system selection variable to other value
#
switch_system() { echo $fsvarname $(( ( $(get_system_switch) + 1 ) % 2 )) >$envpathname; }
#
# switch next boot time selection to specified system, if action is really needed
# $1 - 'running' / 'alternative' to switch to the specified system based on the running version
#
switch_system_to()
{
	local next
	next=$(get_system_switch)
	if is_switched; then
		if [ x"$1" == xrunning ]; then
			switch_system
		fi
	else
		if [ x"$1" == xalternative ]; then
			switch_system
		fi
	fi
	return 0
}
#
# mount alternative system
# $1 - source partition index
# $2 - temporary directory as mount point
#
mount_alternative_system()
{
	local src="$1" tmpdir="$2" rc=0
	mkdir "$tmpdir/altfs" "$tmpdir/rootfs"
	mount -t yaffs2 /dev/$mtdblockprefix$src "$tmpdir/altfs"
	mount "$tmpdir/altfs/$rootfsimage" "$tmpdir/rootfs"
	rc=$?
	echo "$tmpdir/rootfs"
	return $rc
}
#
# dismount the mounted alternative system
# $1 - mount point
#
dismount_alternative_system()
{
	local tmpdir="$1" rc=0
	umount "$tmpdir/rootfs" 2>/dev/null
	rc=$?
	umount "$tmpdir/altfs" 2>/dev/null
	return $rc
}
#
# cleanup any mounted images and remove the temporary directory
#
cleanup()
{
	local device mountpoint filesystem options x y
	grep "$tempdir/rootfs" /proc/mounts |
	while read device mountpoint filesystem options x y; do
		umount "$mountpoint" 2>/dev/null
	done
	grep "$tempdir/altfs" /proc/mounts |
	while read device mountpoint filesystem options x y; do
		umount "$mountpoint" 2>/dev/null
	done
	rm -r "$tempdir" 2>/dev/null
}
#
# prepare a temporary directory and a clean exit routine
#
tempdir="$tmpdirbase/gbtmngr$(date +%s)"
mkdir -p "$tempdir"
trap "cleanup" HUP EXIT
action="$1"
case "$action" in
	html_display)
		hwrev=$(get_hardware_revision)
		check_hardware_revision "$hwrev"
		rc=$?
		switchvalue=$(get_system_switch)
		if [ $rc -eq 0 -o ${#switchvalue} -eq 0 ]; then
			if [ x$Language == xde ]; then
				echo "<h4>Die Umschaltung zwischen zwei alternativen Systemen ist auf dieser FRITZ!Box nicht verf&uuml;gbar.</h4>"
			else
				echo "<h4>Switching between alternative systems is not available at your router yet.</h4>"
			fi
			rc=1
		else
			running_kernel=$(get_mtd_by_name $kernelname)
			alternative_kernel=$(get_mtd_by_name $reservedprefix$kernelname)
			running_filesystem=$(get_mtd_by_name $filesystemname)
			alternative_filesystem=$(get_mtd_by_name $reservedprefix$filesystemname)
			mp=$(mount_alternative_system $alternative_filesystem "$tempdir")
			running_version=$(get_system_version /)
			running_date=$(get_system_date /)
			running_fsdate="$(date -d @$(stat -c %Y $wrapper/$rootfsimage) +"%d.%m.%y %H:%M")"
			alternative_version=$(get_system_version "$mp/")
			alternative_date=$(get_system_date "$mp/")
			alternative_fsdate="$(date -d @$(stat -c %Y "$tempdir/altfs/$rootfsimage") +"%d.%m.%y %H:%M")"
			dismount_alternative_system "$tempdir"
			if is_switched; then
				running_checked=""
				alternative_checked=" checked=\"checked\""
			else
				running_checked=" checked=\"checked\""
				alternative_checked=""
			fi
			if [ x$Language == xde ]; then
				echo "<h4>Folgende Systeme stehen auf dieser FRITZ!Box zur Auswahl bei einem Neustart:</h4>"
				echo "<input type=\"radio\" id=\"radioRunning\" name=\"$fsvarname\" value=\"running\"$running_checked />"
				echo "<label for=\"radioRunning\">das laufende System - Version $running_version vom $running_date, Dateisystem modifiziert am $running_fsdate (MTD$running_kernel/MTD$running_filesystem)</label><br />"
				echo "<input type=\"radio\" id=\"radioAlternative\" name=\"$fsvarname\" value=\"alternative\"$alternative_checked />"
				echo "<label for=\"radioAlternative\">das inaktive System - Version $alternative_version vom $alternative_date, Dateisystem modifiziert am $alternative_fsdate (MTD$alternative_kernel/MTD$alternative_filesystem)</label>"
			else
				echo "<h4>The following systems are available for use after the restart:</h4>"
				echo "<input type=\"radio\" id=\"radioRunning\" name=\"$fsvarname\" value=\"running\"$running_checked />"
				echo "<label for=\"radioRunning\">the running system - version $running_version built at $running_date, root file system modified at $running_fsdate (MTD$running_kernel/MTD$running_filesystem)</label><br />"
				echo "<input type=\"radio\" id=\"radioAlternative\" name=\"$fsvarname\" value=\"alternative\"$alternative_checked />"
				echo "<label for=\"radioAlternative\">the inactive system - version $alternative_version built at $alternative_date, root file system modified at $alternative_fsdate (MTD$alternative_kernel/MTD$alternative_filesystem)</label>"
			fi
			rc=0
		fi
		;;
	switch_to)
		target="$2"
		switch_system_to $target
		rc=$?
		;;
	*)
		rc=127
		;;
esac
exit $rc
ENDOFSCRIPT
	chown root:root "$cmdfile"
	chmod 755 "$cmdfile"
}
case $step in
	precheck)
		find_line
		rc=$?
		if [ $rc -eq 0 ]; then
			case "$language" in
				de)
					echo "Die Modifikation wurde bereit angewendet." 1>&2
					;;
				*)
					echo "The startup file is modified already." 1>&2
					;;
			esac
			rc=1
		else
			find_envvar
			rc=$?
			if [ $rc -ne 0 ]; then
				case "$language" in
					de)
						echo "Dieses Gerät unterstützt keine 'dual boot'-Möglichkeit." 1>&2
						;;
					*)
						echo "This device is unable to boot from an alternative system partition." 1>&2
						;;
				esac
				rc=1
			else
				rc=0
			fi
		fi
		;;
	postcheck)
		find_line
		rc=$?
		if [ $rc -eq 1 ]; then
			case "$language" in
				de)
					echo "Die Modifikation war nicht erfolgreich." 1>&2
					;;
				*)
					echo "The startup file seems to be unmodified." 1>&2
					;;
			esac
			rc=1
		fi
		;;
	install)
		sed -i "$luafile" -e "
/^require(\"webuicookie\")/a\\
if box.post.linux_fs_start then\\
os.execute(\"$binfile switch_to \"..box.post.linux_fs_start)\\
end
/^<form action/a\\
<div id=\"managed_reboot\" class=\"reboot_managed\">\\
<?lua\\
pipe = io.popen(\"$binfile html_display\")\\
line = pipe:read(\"*a\")\\
pipe:close()\\
box.out(line)\\
?>\\
</div>
"
		install_script
		rc=0
		;;
	*)
		rc=59
		;;
esac
exit $rc
